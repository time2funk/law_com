<?php

namespace Proxies\__CG__\Plugins\BlogBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class BlogCategory extends \Plugins\BlogBundle\Entity\BlogCategory implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'name', 'url', 'metatitle', 'metadescription', 'metakeywords', 'blogTopics', 'blogPosts', 'created_at', 'updated_at');
        }

        return array('__isInitialized__', 'id', 'name', 'url', 'metatitle', 'metadescription', 'metakeywords', 'blogTopics', 'blogPosts', 'created_at', 'updated_at');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (BlogCategory $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', array($url));

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', array());

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetatitle($metatitle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetatitle', array($metatitle));

        return parent::setMetatitle($metatitle);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetatitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetatitle', array());

        return parent::getMetatitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetadescription($metadescription)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetadescription', array($metadescription));

        return parent::setMetadescription($metadescription);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetadescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetadescription', array());

        return parent::getMetadescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetakeywords($metakeywords)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetakeywords', array($metakeywords));

        return parent::setMetakeywords($metakeywords);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetakeywords()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetakeywords', array());

        return parent::getMetakeywords();
    }

    /**
     * {@inheritDoc}
     */
    public function addBlogTopic(\Plugins\BlogBundle\Entity\BlogTopic $blogTopics)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addBlogTopic', array($blogTopics));

        return parent::addBlogTopic($blogTopics);
    }

    /**
     * {@inheritDoc}
     */
    public function removeBlogTopic(\Plugins\BlogBundle\Entity\BlogTopic $blogTopics)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeBlogTopic', array($blogTopics));

        return parent::removeBlogTopic($blogTopics);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlogTopics()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlogTopics', array());

        return parent::getBlogTopics();
    }

    /**
     * {@inheritDoc}
     */
    public function addBlogPost(\Plugins\BlogBundle\Entity\BlogPost $blogPosts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addBlogPost', array($blogPosts));

        return parent::addBlogPost($blogPosts);
    }

    /**
     * {@inheritDoc}
     */
    public function removeBlogPost(\Plugins\BlogBundle\Entity\BlogPost $blogPosts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeBlogPost', array($blogPosts));

        return parent::removeBlogPost($blogPosts);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlogPosts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlogPosts', array());

        return parent::getBlogPosts();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedFormat()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedFormat', array());

        return parent::getCreatedFormat();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedFormat()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedFormat', array());

        return parent::getUpdatedFormat();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAtDatetime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAtDatetime', array());

        return parent::getUpdatedAtDatetime();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAtDatetime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAtDatetime', array());

        return parent::getCreatedAtDatetime();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', array($createdAt));

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', array());

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', array($updatedAt));

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', array());

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function cleanUrl($str)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cleanUrl', array($str));

        return parent::cleanUrl($str);
    }

}
